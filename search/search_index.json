{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Quick documentation/reminder on how to use various development tools.</p> <p>If you find (some of) the content useful as reference, contribuitions are welcome, so feel free to propose something new, or report an issue.</p>"},{"location":"common/","title":"website-common","text":"<p>Common files shared between projects' documentation</p>"},{"location":"en/","title":"Welcome","text":"<p>Quick documentation/reminder on how to use various development tools.</p> <p>If you find (some of) the content useful as reference, contribuitions are welcome, so feel free to propose something new, or report an issue.</p>"},{"location":"en/virtualbox/","title":"VirtualBox","text":""},{"location":"en/virtualbox/#bluetooth-usb","title":"Bluetooth / USB","text":"<ul> <li>Disable and stop the service on the host.</li> <li><code># gpasswd -a &lt;username&gt; vboxusers storage</code></li> <li>If necessary add <code>VBOX_USB=usbfs</code> to <code>.bashrc</code></li> <li>Start VirtualBox, go to Settings -&gt; USB, add the device and set the filter   <code>remote</code> property to <code>Any</code></li> <li>In order to use ADB on Android devices, after the USB filter setting,   disconnect the device, run the guest system and then plug again the device.</li> </ul>"},{"location":"en/virtualbox/#extension-pack-manual-install","title":"Extension Pack Manual Install","text":"<p>For some unknown reason the extension pack won't install from the UI, an alternative is to manually install it.</p> <pre><code>su\nVBoxManage extpack install --replace Oracle_VM_VirtualBox_Extension_Pack-XXX.vbox-extpack\nVBoxManage extpack cleanup\n</code></pre>"},{"location":"en/android/custom-rom/","title":"Android custom rom","text":""},{"location":"en/android/custom-rom/#enable-oem-unlocking","title":"Enable OEM unlocking","text":"<ul> <li>Make a data backup if needed</li> <li><code>Settings</code> &gt; <code>About</code> &gt; <code>Build number</code>: tap 7 times to enable <code>Developer options</code></li> <li>Enable <code>Developer options</code> &gt; <code>USB debugging</code></li> <li>Enable <code>Developer options</code> &gt; <code>OEM unlocking</code></li> </ul>"},{"location":"en/android/custom-rom/#twrp-recovery","title":"TWRP recovery","text":"<ul> <li>https://twrp.me/Devices/ and select the correct device model</li> <li>Download the image, should be under <code>twrp.me/&lt;vendor&gt;/&lt;model&gt;.html#download</code>   by select a mirror</li> </ul>"},{"location":"en/android/custom-rom/#heimdall","title":"Heimdall","text":"<ul> <li>Connect the device on an USB port and reboot it in download mode;   on Samsung restart by keeping pressed at same time HOME + POWER + VOLUME DOWN</li> <li>Select the twrp download folder from terminal</li> <li>Run <code>heimdall flash --RECOVERY twrp-&lt;version&gt;-&lt;model&gt;.img --no-reboot</code></li> <li>On a Samsung restart by keeping pressed at same time HOME + POWER + VOLUME UP</li> </ul>"},{"location":"en/android/custom-rom/#install-rom","title":"Install ROM","text":"<ul> <li>Make a full wipe: System, Data and Cache</li> <li>Flash the required software like GApps and then the ROM</li> <li>Reboot</li> </ul>"},{"location":"en/ci/appveyor/","title":"Appveyor","text":"<ul> <li>In case of organizations, public project membership on GitHub at   <code>https://github.com/orgs/&lt;orgname&gt;/people/&lt;username&gt;</code> is required</li> <li>Sign up with the username or organization name on GitHub</li> <li>Revoke GitHub access if the project is owned by another account</li> <li>Reauthorize if revoked</li> <li>Create a Personal access token with <code>repo</code> permissions</li> <li>Encrypt the token</li> <li>Add the encrypted token string to the configuration file</li> </ul> <p>Source: Publishing artifacts to GitHub Releases</p>"},{"location":"en/ci/travis/","title":"Travis","text":"<p>Continuous Integration software can build and deploy software from source automatically.</p> <p>This can be done on the <code>master repo</code> to check if code can be built on all machine set, and also on a <code>tag release</code> to build packages to upload for a release, like on GitHub Releases.</p> <p>As stated here on 2018-05-02 all new repository must be registered using travis.com instead travis.org.</p> <p>The following guide is based on the use of the travis tool, which can be installed for the current user with: <pre><code>$ gem install travis\n</code></pre></p>"},{"location":"en/ci/travis/#github-pages","title":"GitHub Pages","text":"<p>Travis CI can deploy your static files to GitHub Pages after a successful build.</p> <p>You will need to provide a personal access token and set the deployment provider details in <code>.travis.yml</code>.</p> <p>For a minimal configuration, add the following to your <code>.travis.yml</code>:</p> <pre><code>deploy:\n  provider: pages\n  skip_cleanup: true\n  github_token: $GITHUB_TOKEN  # Set in the settings page of your repository, as a secure variable\n  keep_history: true\n  on:\n    branch: master\n</code></pre> <p>See: - Authenticating with an OAuth token - Best Practices in Securing Your Data - Travis CI Encryption Keys</p>"},{"location":"en/ci/travis/#github-releases","title":"GitHub Releases","text":"<p>Other than build on each master repo push, it's possible to build and deploy packages to upload automatically on GitHub releases page. The configuration can be set automatically running: <pre><code>$ travis setup releases --com\n</code></pre> See: GitHub Releases Uploading</p>"},{"location":"en/git/branches/","title":"Branches","text":""},{"location":"en/git/branches/#copy-to-new-repository-manual-fork","title":"Copy to new repository (manual fork)","text":"<ul> <li>Create a new remote repository, e.g.: <code>https://github.com/your-account/new-repo.git</code></li> <li>Enter in the original local clone: <pre><code>cd original-repo\n</code></pre></li> </ul>"},{"location":"en/git/branches/#all","title":"All","text":"<pre><code>git push --all origin # or other name\n</code></pre>"},{"location":"en/git/branches/#one-optionally-renamed","title":"One optionally renamed","text":"<ul> <li>Checkout the wanted branch: <pre><code>git checkout branch-name\n</code></pre></li> <li>Push: <pre><code>git push https://github.com/your-account/new-repo.git \\\n  +branch-name:new-name \\\n  +other-branch-name:other-new-name\n</code></pre></li> </ul>"},{"location":"en/git/commits/","title":"Commits","text":""},{"location":"en/git/commits/#list-all-in-a-branch-not-in-another","title":"List all in a branch, not in another","text":"<pre><code>git log --no-merges &lt;in_branch&gt; ^&lt;not_in_branch&gt;\n</code></pre> <p>Note: on Windows command prompt (not Powershell) <code>^</code> is an escape key,       so it needs to be escaped with another <code>^</code></p> <p>Source</p>"},{"location":"en/git/commits/#replace","title":"Replace","text":"<p>This changes the SHA-1 of the commit and all its children, so it's something to do locally or on a merge/pull request.</p> <ul> <li><code>git rebase --interactive &lt;hash&gt;~</code>: the tilde means reapply all other commits,   this will set that commit as current for editing</li> <li>in the default editor, modify <code>pick</code> to <code>edit</code> in the line mentioning <code>&lt;hash&gt;</code></li> <li>make required changes</li> <li><code>git commit --all --amend --no-edit</code> to amend the changed commit</li> <li><code>git rebase --continue</code> to complete</li> </ul> <p>Source</p>"},{"location":"en/git/orphan-branch/","title":"Create an orphan branch","text":"<pre><code>cd repository\ngit checkout --orphan=orphan_name\ngit rm -rf .\nrm '.gitignore'\ntouch dummy\ngit add dummy\ngit commit -m \"First commit\"\ngit push origin orphan_name\n</code></pre> <p>Source: https://gist.github.com/seanbuscay/5877413</p>"},{"location":"en/git/push-and-pull/","title":"Push and pull","text":""},{"location":"en/git/push-and-pull/#replace-last-commit","title":"Replace last commit","text":"<p>Note: to use only with Pull/Merge Requests</p> <pre><code>git add .\ngit commit --amend --no-edit\ngit push -f origin branch-name\n</code></pre>"},{"location":"en/git/push-and-pull/#pull-force-pushed-commits","title":"Pull force pushed commits","text":"<pre><code>git fetch origin\ngit reset --hard origin/master\n</code></pre>"},{"location":"en/git/rebase/","title":"Rebase","text":""},{"location":"en/git/rebase/#update-the-current-branch-from-upstream-without-a-merge-commit","title":"Update the current branch from upstream without a merge commit","text":"<pre><code>git fetch upstream develop\ngit rebase upstream/develop\n</code></pre>"},{"location":"en/git/rebase/#rebase-on-different-branch","title":"Rebase on different branch","text":"<p>Example: currently merged into <code>develop</code>, merge into <code>master</code> instead:</p> <pre><code>git rebase --onto=master develop\ngit push -f\n</code></pre>"},{"location":"en/git/remotes/","title":"Remotes","text":""},{"location":"en/git/remotes/#multiple","title":"Multiple","text":"<pre><code>$ git remote -v\norigin REMOTE-URL-1 (fetch)\n</code></pre> <ul> <li>Register 1st push URL: <code>git remote set-url --add origin --push REMOTE-URL-1</code> (yes, again).</li> <li>Register 2nd push URL: <code>git remote set-url --add origin --push REMOTE-URL-2</code>.</li> <li>Push a branch to all the remotes with <code>git push origin BRANCH</code> \u2013 replace <code>BRANCH</code>   with a real branch name.</li> <li>You cannot pull from multiple remotes, but you can fetch updates from multiple   remotes with <code>git fetch --all</code>.</li> </ul> <p>Source</p>"},{"location":"en/git/submodules/","title":"Submodules","text":""},{"location":"en/git/submodules/#edit","title":"Edit","text":"<pre><code>git config -f .gitmodules submodule.path/to/submodule.url https://submodule/new/url.git\ngit config -f .gitmodules submodule.path/to/submodule.branch develop\ngit config -f .gitmodules submodule.path/to/submodule.shallow true\ngit submodule sync\ngit submodule update --init --recursive --remote\n</code></pre>"},{"location":"en/git/submodules/#list","title":"List","text":"<pre><code># Either --file=.gitmodules or -f .gitmodules\ngit config --file=.gitmodules -l\n</code></pre> <p>Output:</p> <pre><code>submodule.path/to/submodule.path=path/to/submodule\nsubmodule.path/to/submodule.url=https://submodule/url.git\nsubmodule.path/to/submodule.branch=master\n</code></pre>"},{"location":"en/git/submodules/#remove","title":"Remove","text":"<pre><code>git submodule deinit path/to/submodule\ngit rm path/to/submodule\nrm -rf .git/modules/path/to/submodule\ngit commit -m \"Removed submodule [name]\"\n</code></pre> <p>Source</p>"},{"location":"en/git/submodules/#shallow","title":"Shallow","text":"<p>Error:</p> <p><code>fatal: Fetched in submodule path '[path]', but it did not contain [SHA-1 hash]. Direct fetching of that commit failed.</code></p> <p>This might be caused by a missing branch in the local checkout of the module, in which case it could be solved by using:</p> <pre><code>git remote set-branches origin missing-branch\ngit fetch --depth 1 origin missing-branch\ngit checkout missing-branch\n</code></pre> <p>If the exact commit is required, replace the branch name with the SHA-1 hash in <code>git checkout</code>.</p>"},{"location":"en/github/rest-api/","title":"REST API","text":""},{"location":"en/github/rest-api/#release-assets-download","title":"Release assets download","text":"<pre><code>curl -LJO \\\n    -u ${username}:${token} \\\n    -H \"Accept: application/octet-stream\" \\\n    https://api.github.com/repos/${username}/${repo}/releases/assets/${asset_id}\n</code></pre> <ul> <li>Create a token on your GitHub account on   <code>Settings &gt; Developer settings &gt; Personal access tokens</code>; use all <code>repo</code>   authorizations to download release assets also from private repositories.   On GitHub Actions the variable {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}   can be used instead.</li> <li>To obtain the <code>asset_id</code>:</li> </ul> <pre><code>curl \\\n    -u ${username}:${token} \\\n    -H \"Accept: application/vnd.github.v3+json\" \\\n    https://api.github.com/repos/${username}/${repo}/releases/tags/${tag_name}\n</code></pre>"},{"location":"en/github/rest-api/#run-actions-workflow","title":"Run Actions workflow","text":"<pre><code>curl \\\n-u ${username}:${token} \\\n-X POST \\\n-H \"Accept: application/vnd.github.v3+json\" \\\nhttps://api.github.com/repos/${username}/${repo}/actions/workflows/${yml_filename}/dispatches \\\n-d '{\"ref\":\"${branch}\"}'\n</code></pre>"},{"location":"en/jekyll/rvm/","title":"Install RVM","text":"<pre><code>curl -L get.rvm.io &gt; rvm-install\nbash &lt; ./rvm-install\n</code></pre> <p>For bash completion add to <code>.bashrc</code>:</p> <pre><code># RVM bash completion\n[[ -r \"$HOME/.rvm/scripts/completion\" ]] &amp;&amp; source \"$HOME/.rvm/scripts/completion\"\n</code></pre> <p>If necessary in <code>$HOME/.rvm/scripts/completion</code> replace line 22 with:</p> <pre><code>source \"$HOME/.rvm/scripts/extras/completion.bash\"\n</code></pre> <p>Set the terminal as login terminal in preferences.</p> <p>In VSCode add to <code>settings.json</code>:</p> <pre><code>\"terminal.integrated.shellArgs.linux\": [ \"-l\" ]\n</code></pre>"},{"location":"en/jekyll/rvm/#install-ruby","title":"Install Ruby","text":"<pre><code>rvm install 2.5.3\nrvm use 2.5.3 --default\n</code></pre> <p>Source: https://wiki.archlinux.org/index.php/RVM</p>"},{"location":"en/jekyll/syntax-highlighting/","title":"Syntax Highlighting","text":""},{"location":"en/jekyll/syntax-highlighting/#disable-rouge","title":"Disable Rouge","text":"<p>By default Jekyll uses Rouge as syntax highlighter. In some cases, you may want to disable it. To get Rouge disabled in Jekyll, just add the following in line(s) <code>_config.yml</code>.</p> <p>Not using GitHub Pages:</p> <pre><code>highlighter: none\n</code></pre> <p>Using GitHub Pages:</p> <pre><code>markdown: kramdown\nkramdown:\n  syntax_highlighter_opts:\n    disable : true\n</code></pre> <p>Source: https://www.ronaldsvilcins.com/2018/02/05/disable-jekylls-default-syntax-highlighter-rouge/</p>"},{"location":"en/linux/appimage/","title":"AppImage","text":"<p>Download Linuxdeploy:</p> <pre><code>wget -c -nv \"https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage\" &amp;&amp; \\\nchmod +x linuxdeploy-x86_64.AppImage\n</code></pre> <p>Add icons:</p> <pre><code>AppDir=MyApp\nappname=myapp\nfor size in 16 32 48 128 256\ndo\n  dirname=\"${AppDir}/usr/share/icons/hicolor/${size}x${size}/apps\"\n  mkdir -p $dirname\n  cp ./resources/icons/icon_${size}px.png ./${dirname}/${appname}.png\ndone\n</code></pre> <p>Build the app image:</p> <pre><code>./linuxdeploy-x86_64.AppImage --appdir=${AppDir} \\\n--desktop-file=path/to/${appname}.desktop \\\n--executable=path/to/${appname} \\\n--output=appimage\n</code></pre>"},{"location":"en/linux/lid/","title":"Laptop lid","text":"<p>When using an external monitor and exiting some application like labwc session, the pc goes to suspend mode or similar.</p> <p>To solve this problem, set <code>/etc/systemd/logind.conf</code> by uncommenting the following lines:</p> <pre><code>HandleLidSwitch=ignore\nHandleLidSwitchExternalPower=ignore\n</code></pre> <p>and run <code>sudo systemctl restart systemd-logind</code></p>"},{"location":"en/linux/macos-windows-icons/","title":"macOS &amp; Windows Icons","text":""},{"location":"en/linux/macos-windows-icons/#macos-icons-from-png","title":"macOS icons from PNG","text":"<ul> <li> <p>Create a <code>resource/icons</code> directory inside the application project folder</p> </li> <li> <p>Create PNG icon files in multiple resolutions:</p> </li> </ul> <pre><code>icon_16px.png\nicon_32px.png\nicon_48px.png\nicon_128px.png\nicon_256px.png\n</code></pre> <ul> <li>Install <code>libicns</code> or <code>icnsutils</code> and run:</li> </ul> <pre><code>png2icns icon.icns icon_*px.png\n</code></pre> <p>Source: Creating Mac OS X Icons on Linux</p>"},{"location":"en/linux/macos-windows-icons/#windows-icons-from-png","title":"Windows icons from PNG","text":"<ul> <li>Install <code>icoutils</code> or <code>png2ico</code></li> </ul> <p>Using icoutils:</p> <pre><code>icotool -c -o icon.ico icon_*px.png\n</code></pre> <p>Using png2ico. Width must be multiple of 8 and &lt; 256. Height must be &lt; 256.</p> <pre><code>png2ico icon.ico icon_128px.png\n</code></pre> <p>Additional information on this topic can be found also on the Qt website.</p>"},{"location":"en/linux/arch/aur/","title":"Creating AUR Packages","text":"<ul> <li>Check if the choosen app name already exists in AUR and, if not,   checkout a new empty repository:</li> </ul> <pre><code>git clone ssh://aur@aur.archlinux.org/appname.git\n</code></pre> <ul> <li> <p>Create a PKGBUILD file</p> </li> <li> <p>Create a .SRCINFO file from <code>PKGBUILD</code>:</p> </li> </ul> <pre><code>makepkg --printsrcinfo &gt; .SRCINFO\n</code></pre> <ul> <li>Test the package</li> </ul> <pre><code>makepkg -sri\n</code></pre> <ul> <li>Delete built/uneeded files if any and then:</li> </ul> <pre><code>git add . &amp;&amp; git commit -m \"First commit\" &amp;&amp; git push\n</code></pre> <p>Source: AUR Wiki</p>"},{"location":"en/linux/arch/pacman/","title":"pacman","text":""},{"location":"en/linux/arch/pacman/#keyring","title":"Keyring","text":"<p>If errors with broken keys try:</p> <pre><code>pacman-key --refresh-keys\n</code></pre> <p>or</p> <pre><code>pacman-key --init\npacman-key --populate archlinux\npacman-key --refresh-keys\n</code></pre>"},{"location":"en/lxqt/xdg-desktop-portal/","title":"XDG desktop portal","text":"<p>In order to make work the portal it's necessary to add a</p> <p><code>$HOME/.config/xdg-desktop-portal/portals.conf</code></p> <p>configuration file with the following content:</p> <pre><code>[preferred]\ndefault=lxqt\n</code></pre> <p>A reboot (not relogin) is required after the setting.</p>"},{"location":"en/macos/dmg/","title":"Creating Apple Disk Images","text":"<ul> <li>Run <code>hdiutil</code> to create a DMG file</li> </ul> <pre><code>hdiutil create /tmp/tmp.dmg -ov -volname \"appname-appversion\" -fs HFS+ -srcfolder \"./output/\"\n</code></pre> <ul> <li>Run again <code>hdutil</code> to convert the writable image to a compressed, non-writable image</li> </ul> <pre><code>hdiutil convert /tmp/tmp.dmg -format UDZO -o ./appname-appversion.dmg\n</code></pre>"},{"location":"en/mkdocs/assignments/","title":"Assignments","text":"<p>From documentation:</p> <p>Please keep in mind that it is not possible to set variables inside a block and have them show up outside of it. This also applies to loops. The only exception to that rule are if statements which do not introduce a scope.</p> <p>It is possible though via namespaces or via <code>expression-statement</code> extension. See also this discussion.</p>"},{"location":"en/obs/","title":"OBS","text":"<ol> <li>Register at https://build.opensuse.org/</li> <li>Go to https://build.opensuse.org/project/show/home:account_name</li> <li>Tab <code>Subprojects</code> -&gt; <code>Create Subproject</code></li> </ol>"},{"location":"en/qt/android/","title":"Qt Creator Android Setup","text":"<p>Download and extract the Android SDK and Android NDK.</p> <p>The SDK can be extracted in a directory like</p> <p><code>$HOME/Documents/Development/Qt/Toolchain/X.XX.X/Android/sdk-tools-NNNNNN</code></p> <p>with the <code>tools</code> directory inside.</p> <p>and the NDK as is, e.g.:</p> <p><code>$HOME/Documents/Development/Qt/Toolchain/X.XX.X/Android/android-ndk-rNNX</code></p> <p>These directories will be added on QtCreator from menu Tools -&gt; Options -&gt; Devices -&gt; Android Settings</p>"},{"location":"en/qt/android/#android-sdk-v2525-gcc-qt-512","title":"Android SDK v25.2.5 (GCC, Qt &lt; 5.12)","text":"<p>Set a directory (eg. SDKv25.2.5) and copy the tools directory into it, and from there run <code>tools/android update sdk</code>, following this guide.</p> <p>This SDK version have a native SDKManager that will runs with a GTK interface, follow its install procedure.</p>"},{"location":"en/qt/android/#android-sdk-clang-qt-512","title":"Android SDK (CLang Qt &gt;= 5.12)","text":"<p>Get the latest SDK, NDK must be supported by current Qt version, ATM NDK 17c works with Qt 5.12.0, see below.</p>"},{"location":"en/qt/android/#android-ndk-17c","title":"Android NDK 17c","text":"<p>Error:</p> <p>android-ndk-r17c/toolchains/llvm/prebuilt/linux-x86_64/bin/clang++: error while loading shared libraries: libtinfo.so.5: cannot open shared object file: No such file or directory</p> <p>Resolution: Install ncurses5-compat-libs (6.1-1) -&gt; libtinfo5</p>"},{"location":"en/qt/android/#warnings-errors","title":"Warnings / Errors","text":"<p>See here for harmless warning:</p> <p><code>W BluetoothAdapter: getBluetoothService() called with no BluetoothManagerCallback</code></p>"},{"location":"en/qt/qtcreator/","title":"Qt Creator","text":""},{"location":"en/qt/qtcreator/#installation","title":"Installation","text":"<p>Install components from distro package manager (e.g.: qt5-tools and qtcreator on Arch) and missing components (like Android qmake and other stuff) from the Maintenance Tool (avoid on Arch to use AUR packages that can lead to problems and need too much time to update/build):</p> <ul> <li>For updates add a user defined repository by clicking Configurations on the bottom left button if needed or just skip if a first time installation.</li> <li>Optionally select Qt source files, Purchasing and/or stuff not included in the distro for the version in use.</li> </ul> <p>Be sure about the path since if it will be installed in the wrong directory, at least ATM (2018/12/13), it is not possible to move it without repeat the installation.</p> <p>E.g.: <code>$HOME/Documents/Development/Qt/Toolchain/N.NN.N</code></p> <p>See the Android page for how to install and configure the Android toolchain.</p>"},{"location":"en/qt/qtcreator/#configuration","title":"Configuration","text":""},{"location":"en/qt/qtcreator/#options-build-run","title":"Options Build &amp; Run","text":"<p>Menu Tools -&gt; Options -&gt; General (or Build &amp; Run, depending on the QtCreator version ) * Project directory: E.g. <code>$HOME/Documents/Development/Qt/Projects</code> * Default build directory: <code>%{CurrentProject:Path}/build/%{Debugger:Abi}-%{CurrentBuild:Type}</code></p> <p>E.g.: $HOME/Documents/Development/Qt/Projects/MyProject/build/x86-linux-generic-elf-64bit-debug</p>"},{"location":"en/qt/qtcreator/#build-settings-linux","title":"Build Settings - Linux","text":"<ul> <li>No Shadow Build to avoid Qt Designer to not update the GUI/cache stuff.</li> <li>Delete all predefined steps and add 2 custom steps for qmake and make clean as following</li> </ul> <p>Custom Build Step</p> <ul> <li>Command: <code>qmake</code></li> <li>Arguments: <code>%{CurrentProject:FilePath} -spec linux-g++ CONFIG+=debug &amp;&amp; make</code></li> <li>Working Directory: <code>%{CurrentProject:Path}/build/%{Debugger:Abi}-%{CurrentBuild:Type}</code></li> </ul> <p>Custom Clean Step</p> <ul> <li>Command: <code>make</code></li> <li>Arguments: <code>clean</code></li> <li>Working Directory: <code>%{CurrentProject:Path}/build/%{Debugger:Abi}-%{CurrentBuild:Type}</code></li> </ul>"},{"location":"en/qt/qtcreator/#run-settings-linux","title":"Run Settings - Linux","text":"<p>Custom Executable</p> <ul> <li>Executable: \\&lt;name of the executable&gt; (%{CurrentRun:Executable:FileName} doesn't work ATM)</li> <li>Command line arguments: \\&lt;application dependent&gt;</li> <li>Working Directory: <code>%{CurrentProject:Path}/build/%{Debugger:Abi}-%{CurrentBuild:Type}</code></li> </ul>"},{"location":"en/qt/qtcreator/#build-settings-android","title":"Build Settings - Android","text":"<ul> <li>Let Shadow Build enabled (The build directory from Build &amp; Run options above will be used by default.)</li> <li>Leave default options</li> <li>Build Android APK -&gt; Select the appropriate SDK version -&gt; Create templates -&gt; Uncheck \"Copy gradle files\" -&gt; Click Finish -&gt; edit the resulting XML (This as one time configuration)</li> </ul>"},{"location":"en/qt/translations/","title":"Translations","text":"<ul> <li>Add the [projectName]_[lang_id].ts filename under the qmake project file ([projectName].pro) TRANSLATIONS variable:   <pre><code>TRANSLATIONS += resources/translations/myapp_en.ts\n</code></pre></li> <li>In a terminal window, change directory to the project one and type: lupdate -verbose .pro   to create the translations/*.ts files, or from QtCreator -&gt; Tools -&gt; External -&gt; Linguist -&gt; Update Translations (lupdate). <li>Open the file with Qt Linguist and translate it.</li> <li>Run lrelease .pro or, as above but running Release, to build the binary .qm translation file."},{"location":"en/qt/archive/bluetooth-modules/","title":"Bluetooth modules","text":"<p>The Bluetooth modules presented here make it possible to connect serial devices wirelessly to a PC or smartphone. The RFCOMM protocol from the SPP profile is used.</p> <p>I have had several bad experiences with Chinese Bluetooth modules and the good BTM-222 is hard to come by. In addition, Apple's mobile devices do not support the RFCOMM protocol. Therefore, the ESP-8266 chip with WLAN may be a better alternative for your project.</p>"},{"location":"en/qt/archive/bluetooth-modules/#hc-05","title":"HC-05","text":"<p>The HC-05 from China is intended for 3.3V, but you can also buy it together with an adapter board for 5V. In my tests, it reached less than 5 meters range with largely error-free and speedy data transmission. Even with a short distance the connection to the PC or smartphone fails sporadically. In the absence of shielding, this module will probably never receive approval for commercial applications.</p> <p>As long as the module has no radio connection, it can be configured (at the Rxd and TxD ports) with AT commands. After establishing the connection, it transmits serial data transparently to the connection partner.</p> <p>The pin assignment is the following:</p> <ul> <li>1 = TxD (output)</li> <li>2 = RxD (input)</li> <li>11 = input Low = Reset (not connected = High)</li> <li>12 = supply normal 3.3V 50mA (3..4.2V, short-term 250mA)</li> <li>13 = GND</li> <li>31 = LED 1, constantly flashing</li> <li>32 = LED 2, Low on standby and High on connection.</li> <li>34 = input Low = Normal operation, High = Command mode (unwired = Low) </li> </ul> <p>Pin 34 can be used to switch to command mode (even during a connection):</p> <ul> <li>Low: The module can establish connections and execute some AT commands as long as it is not connected by radio. The baud rate set with AT+UART applies.</li> <li>Change from low to high: The module goes into command mode. The baud rate set with AT+UART applies.</li> <li>High while the power is switched on: The module starts in configuration mode, where it supports all commands. The baud rate in this mode is always 38400. To exit this mode, the power must be switched off and on again. </li> </ul> <p>By default, the serial port is 9600 baud and the module is ready to accept connections from any master (PC or smartphone). On the serial port, the module can be configured with commands. These are the most important commands for slave mode:</p> <ul> <li>AT+ORGL Reset all settings to the default values</li> <li>AT+PSWD=1234 Change password (default 1234)</li> <li>AT+NAME=HC-05 Change Name (default HC-05)</li> <li>AT+UART=9600,0,0 Change baud rate from a range of 4800 to 1300000 (default 9600)</li> <li>AT+CMODE=1 Allow connection with any partner (default)</li> <li>AT+CMODE=0 Allow connection only with a specific partner (Either the last friend or set with AT+BIND)</li> <li>AT+BIND=A854,B2,3FB035 Bind the module to the specified partner (parameter is the address but with comma instead of colons) </li> </ul> <p>Other commands are:</p> <ul> <li>AT+ROLE? Poll master / slave mode</li> <li>AT+ADDR? Query own address</li> <li>AT+PSWD? Query password</li> <li>AT+NAME? Interrogate own name</li> <li>AT+CMODE? Query connection mode</li> <li>AT+RMAAD Terminate Current Connection and Pairing (if any) </li> </ul> <p>All commands are terminated with a line break (CRLF or \\r\\n). If you send several commands to the module one at a time, you have to give him enough time after each command to execute the command. The module can not receive the next command until the previous command has been executed.</p> <p>To put the module in master mode and connect it to a slave, use the following commands:</p> <ul> <li>AT+ORGL Reset all settings to the default values</li> <li>AT+ROLE=1 master mode</li> <li>*AT+PSWD=1234 Set the same password as for the slave</li> <li>AT+RMAAD End current paring (if available)</li> <li>AT+CMODE=0 Allow connection only with a specific partner</li> <li>AT+BIND=A854,B2,3FB035 Bind the module to the specified partner (parameter is the address but with comma instead of colons)</li> <li>AT+RESET Restart, the module searches for the slave and tries to connect.</li> <li>AT+LINK=A854,B2,3FB035 Connect to the specified slave </li> </ul> <p>After these commands, the module automatically connects to the slave in the future. With AT+ROLE=0 followed by AT+RESET one returns to slave mode.</p> <p>The following commands can be used to search for reachable slaves:</p> <ul> <li>AT+CMODE=1 Allow each connection partner</li> <li>AT+INQM=0.5.9 Search up to 5 devices in 9 seconds</li> <li>AT+INIT If the module responds with ERROR (17): ignore and continue</li> <li>AT+INQ? Starts the search, for example, gives the address A854:B2:3FB035</li> <li>AT+RNAME?A854,B2,3FB035 Displays the name of an accessible partner </li> </ul> <p>In some documentation commands are mentioned, with which one can directly control individual I/O pins. This feature is obviously optional and not supported by any firmware.</p> <p>Here is an incomplete english description of HC-05 and HC-06, as well as the instruction set.</p>"},{"location":"en/qt/archive/bluetooth-modules/#the-little-brother-hc-06","title":"The little brother HC-06","text":"<p>The HC-06 module is sold in two variants: master and slave, with very few dealers selling the master variant.</p> <ul> <li>The slave version HC-06-S waits for it to be contacted by a master (computer or smartphone).</li> <li>The master version HC-06-M automatically establishes a connection to any reachable slave and then remembers it for later connections. </li> </ul> <p>The operating mode can not be reconfigured. Externally, the modules HC-05, HC-06-M and HC-06-S look identical. The pin assignment of the HC-06 is a bit different:</p> <ul> <li>1 = TxD (output)</li> <li>2 = RxD (input)</li> <li>11 = input Low = Reset (not connected = High)</li> <li>12 = supply normal 3.3V 50mA (3..4.2V, short-term 250mA)</li> <li>13 = GND</li> <li>24 = Status LED, flashing on standby, high on connection.</li> <li>26 = Low input = Normal operation, High = Deleting the stored connection partner (HC-06-M only, unconnected = Low) </li> </ul> <p>And also the instruction set is different:</p> <ul> <li>AT+BAUD1 Set baud rate to 1200</li> <li>AT+BAUD2 Set baud rate to 2400</li> <li>AT+BAUD3 Set baud rate to 4800</li> <li>AT+BAUD4 Set baud rate to 9600 (= default)</li> <li>AT+BAUD5 Set baud rate to 19200</li> <li>AT+BAUD6 Set baud rate to 38400</li> <li>AT+BAUD7 Set baud rate to 57600</li> <li>AT+BAUD8 Set baud rate to 115200</li> <li>AT+NAMExxxxxx Change device name to xxxxxx (default linvor)</li> <li>AT+PINxxxx set password (default 1234) </li> </ul> <p>With the HC-06, the commands must not be terminated with a line break, otherwise it simply ignores them!</p>"},{"location":"en/qt/archive/bluetooth-modules/#btm-222","title":"BTM-222","text":"<p>The BTM-222 module from Rayson has a closed housing and creates a good range even with a simple piece of wire as the antenna. 5 meters across the living room are no problem. It also works much more reliably than the HC-05 and HC-06 modules.</p> <p>As long as the module has no radio connection, it can be configured (at the Rxd and TxD ports) with AT commands. After establishing the connection, it transmits serial data transparently to the connection partner.</p> <p>There are only a few pins attached:</p> <ul> <li>1 = GND</li> <li>2 and 17 = supply 3.3V 100mA (3..3.3V, short-term 300mA)</li> <li>13 = Status LED, blinks on standby and high on connection.</li> <li>26 = RxD (input)</li> <li>27 = TxD (output)</li> <li>37 = antenna: 3cm or 12cm wire </li> </ul> <p>To connect the BTM-222 to a microcontroller with 5V power supply, you need a voltage regulator that can deliver 300mA for a short time (eg LF33CV) and a few small parts:</p> <p></p> <p>The most important commands, they only go on the serial port:</p> <ul> <li>ATP? Query password</li> <li>ATP=1234 set password (default 1234)</li> <li>ATP0 switch off password</li> <li>ATN? Query device name</li> <li>ATN=BTM-222 Change device name</li> <li>ATL0 4800 Baud</li> <li>ATL1 9600 Baud</li> <li>ATL2 19200 baud (default)</li> <li>ATL3 38400 baud</li> <li>ATL4 57600 Baud</li> <li>ATL5 115200 Baud</li> <li>ATL6 230400 baud</li> <li>ATL7 460800 Baud</li> <li>ATD? Query connection partner</li> <li>ATD0 Allow any partner (default)</li> <li>ATD=A854-B2-3FB035 Define connection partner</li> <li>ATF? List accessible devices</li> <li>ATR0 master mode</li> <li>ATR1 slave mode (default) </li> </ul> <p>Commands are completed with a line break (CRLF or \\r\\n). If you send several commands to the module one at a time, you have to give him enough time after each command to execute the command. The module can not receive the next command until the previous command has been executed.</p> <p>The datasheet of the BTM222 lists numerous exciting features, such as programmable I/O pins, USB interface, voice functions, etc. All these functions are not supported by the usual \"SPP\" firmware.</p> <p>The CONNECT '001D-D9-F71C7E' message appears on the serial port when a radio connection has been established and the message DISCONNECT '001D-D9-F71C7E' appears if the radio connection has been disconnected and also appears in an unconnected state From time to time, status messages such as AT+GCAP If you program the connected microcontroller, it might be useful to know that these messages never contain lower case letters.</p>"},{"location":"en/qt/archive/bluetooth-modules/#notes-on-programming","title":"Notes on programming","text":""},{"location":"en/qt/archive/bluetooth-modules/#use-under-windows","title":"Use under Windows","text":"<p>Turn on the power, click on the Bluetooth icon in the taskbar. You have to enter the password of the module and a virtual serial port will be installed.</p> <p>Then you can use the connection, eg with a terminal program. Windows does not establish the radio connection until the virtual serial port is opened, and the connection is disconnected when the serial port is closed.</p> <p>If the module is found, but an error message always appears when opening the virtual serial port, try a different Bluetooth driver. For me it did not work with the driver from Windows Vista, but with the driver of Widcomm, which I could download from the support page of my notebook manufacturer.</p> <p>To address the module with a Java program, you need the RxTx library.</p> <p>For first tests, I recommend the program Hammer Terminal.</p>"},{"location":"en/qt/archive/bluetooth-modules/#use-under-linux","title":"Use under Linux","text":"<p>After setting up Pairing with the Bluetooth device in the Control Panel, use the <code>hcitool</code> scan command to find out its device address and then <code>rfcomm bind 0 &lt;address&gt;</code> to create a virtual serial port. Because of 0, the serial port is called /dev/rfcomm0.</p> <p>To address the module with a Java program, you need the RxTx library. First tests can be performed with Cutecom and Hammer Terminal.</p>"},{"location":"en/qt/archive/bluetooth-modules/#use-on-android","title":"Use on Android","text":"<p>The Android SDK includes special Bluetooth communication classes that provide an InputStream and OutputStream after connection. A virtual serial port is not available on Android.</p> <p>To establish the connection you need the UUID \"00001101-0000-1000-8000-00805F9B34FB\". The example program \"Bluetooth Chat\" from the Android SDK works only after customizing the UUID in the source code.</p> <p>You may like to check out my minimal example app BtTest, how to use the Bluetooth classes of the Android SDK.</p> <p>If you program apps in C ++, you must address the Bluetooth API using the Java Native Interface (JNI). The Qt application AndroidBluetooth demonstrates how to do that. From version 5.3 Qt Bluetooth supports the same technique. Even so, some programmers prefer my example because it seems to work more reliably.</p>"},{"location":"en/qt/archive/bluetooth-modules/#use-on-ios","title":"Use on iOS","text":"<p>Unfortunately, Apple's iOS devices do not support the RFCOMM protocol at all.</p> <p>Source: http://stefanfrings.de/bluetooth/index.html (english version)</p>"},{"location":"en/qt/archive/develop-android-apps-with-qt/","title":"Develop Android apps with Qt","text":"<p>This document is an old archive here just as reference.</p> <p>The Qt Framework supports multi-platform software development in C++. The Qt SDK contains a development environment as well as a runtime libraries for many operating systems.</p> <p>Unfortunately, the C++ compiler of the Android NDK became broken some releases ago and Google refused to fix the problem. More than that, Google announced to remove required parts from the NDK permanently. This is very annoing, it happened at a time when Qt was just fully adopted to Android. Therefore, I cannot recommend the use of Qt for Android anymore.</p>"},{"location":"en/qt/archive/develop-android-apps-with-qt/#bluetooth","title":"Bluetooth","text":"<p>I use personal computers and Android tablets to control home-made electronic devices. For this purpose, my devices are sometimes equipped with a Bluetooth interface of type BTM-222, HC-05 or HC-06. They support the RFCOMM protocol, also known as SPP profile.</p> <p></p> <p>Download AndroidBluetooth.zip.</p> <p>Qt introduced Bluetooth support for Android in release 5.3. I developed the class AndroidRfComm as an alternative, which works already with release 5.2. It can list already known devices quickly without having to run the lengthly device discovery process. AndroidRfComm is designed for the pattern \"send a command and wait for the response\". It provides a simple and useful timeout mechanism.</p> <p>Programming example:</p> <p><pre><code>AndroidRfComm rfcomm;\nif (rfcomm.isEnabled()) {\n    rfcomm.connect(\"HC-06\");\n    if (rfcomm.isConnected()) {\n        // Send a line of text\n        rfcomm.sendLine(\"Hello\");\n        // Wait for the answer, max.200 milliseconds\n        QString received=rfcomm.receiveLine(200);  \n        rfcomm.disconnect();\n    }\n}\n</code></pre> AndroidRfComm uses Googles Java API over JNI, because the Native Development Kit does not contain Bluetooth features.</p>"},{"location":"en/windows/innosetup/","title":"InnoSetup","text":"<ul> <li>Download and install InnoSetup</li> <li>Create a new InnoSetup script using the wizard or using some template</li> </ul> <pre><code>#define MyAppName \"MyApp\"\n#define MyAppVersion \"0.1.0\"\n#define MyAppPublisher \"MyNameOrOrganization\"\n#define MyAppURL \"https://my.website.tld/\"\n#define MyAppExeName \"myapp.exe\"\n\n[Setup]\n; NOTE: The value of AppId uniquely identifies this application.\n; Do not use the same AppId value in installers for other applications.\n; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)\n{%-assign UUID = \"{{12345678-ABCD-1234-5678-1234567890AB}\" %}\nAppId={{ UUID }}\nAppName={#MyAppName}\nAppVersion={#MyAppVersion}\n;AppVerName={#MyAppName} {#MyAppVersion}\nAppPublisher={#MyAppPublisher}\nAppPublisherURL={#MyAppURL}\nAppSupportURL={#MyAppURL}\nAppUpdatesURL={#MyAppURL}\nDefaultDirName={pf}\\{#MyAppName}\nDefaultGroupName={#MyAppPublisher}\nOutputBaseFilename=myapp-setup\nCompression=lzma\nSolidCompression=yes\nLicenseFile=Deployment\\LICENSE.txt\n\n[Languages]\nName: \"english\"; MessagesFile: \"compiler:Default.isl\"\nName: \"italian\"; MessagesFile: \"compiler:Languages\\Italian.isl\"\n; or any additional language\n\n[Tasks]\nName: \"desktopicon\"; Description: \"{cm:CreateDesktopIcon}\"; GroupDescription: \"{cm:AdditionalIcons}\"; Flags: unchecked\nName: \"quicklaunchicon\"; Description: \"{cm:CreateQuickLaunchIcon}\"; GroupDescription: \"{cm:AdditionalIcons}\"; Flags: unchecked; OnlyBelowVersion: 0,6.1\n\n[Files]\nSource: \"Deployment\\myapp.exe\"; DestDir: {app}; Flags: ignoreversion\nSource: \"Deployment\\vc_redist.x64.exe\"; DestDir: {tmp}; Flags: deleteafterinstall\nSource: \"Deployment\\LICENSE.txt\"; DestDir: {app}; Flags: ignoreversion\n; NOTE: Don't use \"Flags: ignoreversion\" on any shared system files\n\n[Icons]\nName: \"{group}\\{#MyAppName}\"; Filename: \"{app}\\{#MyAppExeName}\"\nName: \"{commondesktop}\\{#MyAppName}\"; Filename: \"{app}\\{#MyAppExeName}\"; Tasks: desktopicon\n\n[Run]\nFilename: {tmp}\\vc_redist.x64.exe; \\\n    Parameters: \"/install /passive /norestart\"; \\\n    StatusMsg: \"Installing Microsoft Visual C++ 2015-2019 Redistributable (x64)...\"\nFilename: {app}\\{#MyAppExeName}; Description: \"{cm:LaunchProgram,{#StringChange(MyAppName, '&amp;', '&amp;&amp;')}}\"; Flags: nowait postinstall skipifsilent\n; this id you need to install additional packages like MSVC runtimes, don't edit MyAppName\n</code></pre>"},{"location":"en/windows/mingw-w64/","title":"MinGW-w64","text":"<p>Currently using the following tools for different terminals: native cmd.exe (or powershell, MinGW) and the POSIX shell (MSYS2).</p>"},{"location":"en/windows/mingw-w64/#msys2","title":"MSYS2","text":"<ul> <li>Download MSYS2 from https://www.msys2.org</li> <li>Once installed you will have 3 shortcuts:</li> <li>MSYS2 MinGW 32-bit</li> <li>MSYS2 MinGW 64-bit &lt;- use this once configuration is done</li> <li> <p>MSYS2 MSYS2</p> </li> <li> <p>Follow the instructions in the download page, at some point after running   <code>pacman -Syu</code> it will ask to close and reopen the terminal again.</p> </li> <li> <p>Install required packages for JACK:</p> </li> </ul> <pre><code>pacman -S ${MINGW_PACKAGE_PREFIX}-\\\n{toolchain,meson,libsndfile,libsamplerate,portaudio,\\\nlibopusenc,eigen3,readline,libtre-git,cmake,db}\n</code></pre> <p>On CMake use -G \"MSYS Makefiles\" option.</p>"},{"location":"en/windows/mingw-w64/#mingw","title":"MinGW","text":"<p>There are different distributions of MinGW, for now I'm testing the version shipped with MSYS2. MinGW doesn't currently provide Git, see also this issue.</p> <ul> <li>Duplicate (no symlink) mingw32-make.exe as make.exe</li> <li>Install Git for Windows</li> </ul> <p>On CMake use -G \"MinGW Makefiles\" option.</p>"}]}